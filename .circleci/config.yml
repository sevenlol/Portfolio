version: 2
jobs:
  # test website job
  test_web:
    working_directory: ~/project/web
    docker:
      - image: circleci/node:8.9.1-browsers
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "package.json" }}
            - v2-dependencies-
      - run:
          # install dependencies
          name: Install local dependencies
          command: npm install
      - save_cache:
          key: v2-dependencies-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          # linting
          name: Linting
          command: npm run lint
      - run:
          # test
          name: Test
          command: npm run test
          environment:
            JUNIT_REPORT_PATH: reports/
            JUNIT_REPORT_NAME: test-results.xml
      - store_test_results:
          path: reports/
      - store_artifacts:
          path: reports/
  # build website job
  build_web:
    working_directory: ~/project/web
    docker:
      - image: circleci/node:8.9.1-browsers
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "package.json" }}
            - v2-dependencies-
      - run:
          # install dependencies
          name: Install local dependencies
          command: npm install
      - save_cache:
          key: v2-dependencies-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          # configure angular environment and web manifest
          name: Configure environment and manifest
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
                export PORTFOLIO_ENV=staging
            elif [ "${CIRCLE_BRANCH}" == "release" ]; then
                export PORTFOLIO_ENV=prod
            else
                echo "Invalid branch name ${CIRCLE_BRANCE}"
            fi
            echo ${CIRCLE_BRANCH}
            echo ${PORTFOLIO_ENV}
            npm run configure-env
            npm run configure-manifest
      - run:
          name: Build Website
          command: npm run build
      - run:
          # https://github.com/angular/angular-cli/issues/8794
          name: Fix Service Worker Hash
          command: npm run fix-sw-hash
      - store_artifacts:
          path: dist/
      - save_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - dist
  # deploy web job
  deploy_web:
    working_directory: ~/project/web
    docker:
      - image: circleci/node:8.9.1-browsers
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "package.json" }}
            - v2-dependencies-
      - restore_cache:
          keys:
            - v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          # install dependencies
          name: Install local dependencies
          command: npm install
      - save_cache:
          key: v2-dependencies-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          # configure angular environment
          name: Deploy Website
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              export FIREBASE_PROJECT=${FIREBASE_PROJECT_STAGING}
              export FIREBASE_TOKEN=${FIREBASE_TOKEN_STAGING}
            elif [ "${CIRCLE_BRANCH}" == "release" ]; then
              export FIREBASE_PROJECT=${FIREBASE_PROJECT_PROD}
              export FIREBASE_TOKEN=${FIREBASE_TOKEN_PROD}
            else
              echo "Invalid branch name ${CIRCLE_BRANCE}"
            fi
            echo ${CIRCLE_BRANCH}
            echo ${FIREBASE_PROJECT}
            ./node_modules/.bin/firebase use ${FIREBASE_PROJECT}
            ./node_modules/.bin/firebase deploy --token ${FIREBASE_TOKEN} --only hosting
  # build typescript document
  build_web_ts_doc:
    working_directory: ~/project/web
    docker:
      - image: circleci/node:8.9.1-browsers
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "package.json" }}
            - v2-dependencies-
      - run:
          # install dependencies
          name: Install local dependencies
          command: npm install
      - save_cache:
          key: v2-dependencies-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Build Website Typescript Document
          command: npm run docs
      - save_cache:
          key: v1-ts-doc-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - doc
  # deploy typescript document
  deploy_web_ts_doc:
    working_directory: ~/release
    docker:
      - image: circleci/node:8.9.1-browsers
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          keys:
            - v1-ts-doc-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Deploy Website Typescript Document to Github Page
          command: |
            git init
            git remote add --fetch origin ${WEB_TS_DOC_REPO}
            git config --global user.email ${GITHUB_EMAIL}
            git config --global user.name ${GITHUB_NAME}
            if git rev-parse --verify origin/gh-pages > /dev/null 2>&1
            then
              git checkout gh-pages
              git rm -rf .
            else
              git checkout --orphan gh-pages
            fi
            cp -a ~/project/web/doc/. .
            git add .
            git commit -m "document"
            git push --force --quiet origin gh-pages > /dev/null 2>&1
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - test_web
      - build_web:
          requires:
            - test_web
          filters:
            branches:
              only:
                - master
                - release
      - deploy_web:
          requires:
            - build_web
          filters:
            branches:
              only:
                - master
                - release
  build_n_deploy_ts_doc:
    jobs:
      - build_web_ts_doc
      - deploy_web_ts_doc:
          requires:
            - build_web_ts_doc
          filters:
            branches:
              only:
                - master